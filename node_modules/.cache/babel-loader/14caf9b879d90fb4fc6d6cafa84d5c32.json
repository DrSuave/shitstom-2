{"ast":null,"code":"import _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport Prompt from './Components/prompt';\nimport ReactGA from 'react-ga';\nimport { onSuggestionsClearRequested, onSuggestionsFetchRequested, onChange, isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport { onResponse, getWeather, getForecast } from './weatherFunc.js';\nimport { Analytics_ID } from './key.js';\nexport var location = '';\nexport var deferredPrompt;\nReactGA.initialize(Analytics_ID);\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      temperature: 'Loading',\n      //the temperature doubles as a loading notification if the connection is slow\n      city: 'London',\n      country: 'GB',\n      humidity: '',\n      description: '',\n      error: '',\n      value: '',\n      suggestions: [],\n      message: '',\n      subMessage: '',\n      appDownload: false\n    };\n    _this.onResponse = onResponse.bind(_assertThisInitialized(_this));\n    _this.getWeather = getWeather.bind(_assertThisInitialized(_this));\n    _this.getForecast = getForecast.bind(_assertThisInitialized(_this));\n    _this.onChange = onChange.bind(_assertThisInitialized(_this));\n    _this.onSuggestionsFetchRequested = onSuggestionsFetchRequested.bind(_assertThisInitialized(_this));\n    _this.onSuggestionsClearRequested = onSuggestionsClearRequested.bind(_assertThisInitialized(_this));\n    return _this;\n  } //as soon as the component mounts on page load, we trigger the API calls\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getWeather(); //We also listen to see if the user can download shitstorm as a webapp\n\n      window.addEventListener('beforeinstallprompt', function (e) {\n        // Prevent Chrome 67 and earlier from automatically showing the prompt\n        e.preventDefault(); // Stash the event so it can be triggered later.\n\n        deferredPrompt = e; // Update UI notify the user they can add to home screen\n\n        console.log('app download');\n\n        _this2.setState({\n          appDownload: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\",\n        //we display the city if geolocation found our user, if not we demand to know where they live\n        value: value,\n        onChange: this.onChange\n      };\n      return React.createElement(\"div\", {\n        className: 'weather' + this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: this.state.appDownload ? 'downloadable wrapper' : 'wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(ShitTag, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(WTF, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(Autosuggest, {\n        multiSection: true,\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        renderSectionTitle: renderSectionTitle,\n        getSectionSuggestions: getSectionSuggestions,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(Now, {\n        temperature: this.state.temperature,\n        description: this.state.description,\n        windDeg: this.state.windDeg,\n        windSpeed: this.state.windSpeed,\n        daylightLeft: this.state.daylightLeft,\n        sunrise: this.state.sunrise,\n        sunset: this.state.sunset,\n        message: this.state.message,\n        subMessage: this.state.subMessage,\n        icon: this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(WeatherRow, {\n        currentForecast: this.state.currentForecast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(Prompt, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js"],"names":["React","Component","Autosuggest","Now","WeatherRow","ShitTag","WTF","Prompt","ReactGA","onSuggestionsClearRequested","onSuggestionsFetchRequested","onChange","isCity","getSuggestions","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","getCountry","onResponse","getWeather","getForecast","Analytics_ID","location","deferredPrompt","initialize","App","props","state","temperature","city","country","humidity","description","error","value","suggestions","message","subMessage","appDownload","bind","window","addEventListener","e","preventDefault","console","log","setState","inputProps","placeholder","icon","windDeg","windSpeed","daylightLeft","sunrise","sunset","currentForecast"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAAQC,2BAAR,EAAqCC,2BAArC,EAAkEC,QAAlE,EAA4EC,MAA5E,EAAoFC,cAApF,EAAoGC,kBAApG,EAAwHC,gBAAxH,EAA0IC,kBAA1I,EAA8JC,qBAA9J,EAAqLC,UAArL,QAAuM,iBAAvM;AACA,SAAQC,UAAR,EAAoBC,UAApB,EAAgCC,WAAhC,QAAkD,kBAAlD;AACA,SAAQC,YAAR,QAA2B,UAA3B;AACA,OAAO,IAAIC,QAAQ,GAAG,EAAf;AACP,OAAO,IAAIC,cAAJ;AAGPhB,OAAO,CAACiB,UAAR,CAAmBH,YAAnB;;IAEMI,G;;;;;AAgBJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AADiB,UAdnBC,KAcmB,GAdX;AACNC,MAAAA,WAAW,EAAE,SADP;AACkB;AACxBC,MAAAA,IAAI,EAAE,QAFA;AAGNC,MAAAA,OAAO,EAAE,IAHH;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,WAAW,EAAE,EALP;AAMNC,MAAAA,KAAK,EAAE,EAND;AAONC,MAAAA,KAAK,EAAE,EAPD;AAQNC,MAAAA,WAAW,EAAE,EARP;AASNC,MAAAA,OAAO,EAAE,EATH;AAUNC,MAAAA,UAAU,EAAE,EAVN;AAWNC,MAAAA,WAAW,EAAE;AAXP,KAcW;AAEjB,UAAKpB,UAAL,GAAkBA,UAAU,CAACqB,IAAX,+BAAlB;AACA,UAAKpB,UAAL,GAAkBA,UAAU,CAACoB,IAAX,+BAAlB;AACA,UAAKnB,WAAL,GAAmBA,WAAW,CAACmB,IAAZ,+BAAnB;AACA,UAAK7B,QAAL,GAAgBA,QAAQ,CAAC6B,IAAT,+BAAhB;AACA,UAAK9B,2BAAL,GAAmCA,2BAA2B,CAAC8B,IAA5B,+BAAnC;AACA,UAAK/B,2BAAL,GAAmCA,2BAA2B,CAAC+B,IAA5B,+BAAnC;AAPiB;AASlB,G,CAED;;;;;wCACoB;AAAA;;AAClB,WAAKpB,UAAL,GADkB,CAElB;;AACAqB,MAAAA,MAAM,CAACC,gBAAP,CAAwB,qBAAxB,EAA+C,UAACC,CAAD,EAAO;AAClD;AACAA,QAAAA,CAAC,CAACC,cAAF,GAFkD,CAGlD;;AACApB,QAAAA,cAAc,GAAGmB,CAAjB,CAJkD,CAKlD;;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,QAAA,MAAI,CAACC,QAAL,CAAe;AACXR,UAAAA,WAAW,EAAE;AADF,SAAf;AAGH,OAVD;AAWD;;;6BAEQ;AAAA,wBACwB,KAAKX,KAD7B;AAAA,UACCO,KADD,eACCA,KADD;AAAA,UACQC,WADR,eACQA,WADR;AAEP,UAAMY,UAAU,GAAG;AACjBC,QAAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWE,IAAX,GAAkB,KAAKF,KAAL,CAAWE,IAA7B,GAAoC,6BADhC;AAC+D;AAChFK,QAAAA,KAAK,EAALA,KAFiB;AAGjBxB,QAAAA,QAAQ,EAAE,KAAKA;AAHE,OAAnB;AAKA,aACE;AAAK,QAAA,SAAS,EAAE,YAAW,KAAKiB,KAAL,CAAWsB,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAK,QAAA,SAAS,EAAE,KAAKtB,KAAL,CAAWW,WAAX,GAAyB,sBAAzB,GAAkD,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,EAEG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAGG,oBAAC,WAAD;AACE,QAAA,YAAY,EAAE,IADhB;AAEE,QAAA,WAAW,EAAEH,WAFf;AAGE,QAAA,2BAA2B,EAAE,KAAK1B,2BAHpC;AAIE,QAAA,2BAA2B,EAAE,KAAKD,2BAJpC;AAKE,QAAA,kBAAkB,EAAEK,kBALtB;AAME,QAAA,gBAAgB,EAAEC,gBANpB;AAOE,QAAA,kBAAkB,EAAEC,kBAPtB;AAQE,QAAA,qBAAqB,EAAEC,qBARzB;AASE,QAAA,UAAU,EAAE+B,UATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHH,EAcG,oBAAC,GAAD;AACE,QAAA,WAAW,EAAE,KAAKpB,KAAL,CAAWC,WAD1B;AAEE,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWK,WAF1B;AAGE,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWuB,OAHtB;AAIE,QAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWwB,SAJxB;AAKE,QAAA,YAAY,EAAE,KAAKxB,KAAL,CAAWyB,YAL3B;AAME,QAAA,OAAO,EAAE,KAAKzB,KAAL,CAAW0B,OANtB;AAOE,QAAA,MAAM,EAAE,KAAK1B,KAAL,CAAW2B,MAPrB;AAQE,QAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWS,OARtB;AASE,QAAA,UAAU,EAAE,KAAKT,KAAL,CAAWU,UATzB;AAUE,QAAA,IAAI,EAAE,KAAKV,KAAL,CAAWsB,IAVnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdH,EA0BG,oBAAC,UAAD;AAAY,QAAA,eAAe,EAAE,KAAKtB,KAAL,CAAW4B,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BH,EA2BG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3BH,CADH,CADF;AAiCD;;;;EApFexD,KAAK,CAACC,S;;AAsFxB,eAAeyB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport Prompt from './Components/prompt';\nimport ReactGA from 'react-ga';\nimport {onSuggestionsClearRequested, onSuggestionsFetchRequested, onChange, isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport {onResponse, getWeather, getForecast} from './weatherFunc.js';\nimport {Analytics_ID} from './key.js';\nexport let location = '';\nexport let deferredPrompt;\n\n\nReactGA.initialize(Analytics_ID);\n\nclass App extends React.Component {\n\n  state = {\n    temperature: 'Loading', //the temperature doubles as a loading notification if the connection is slow\n    city: 'London',\n    country: 'GB',\n    humidity: '',\n    description: '',\n    error: '',\n    value: '',\n    suggestions: [],\n    message: '',\n    subMessage: '',\n    appDownload: false\n  }\n\n  constructor(props) {\n    super(props);\n    this.onResponse = onResponse.bind(this);\n    this.getWeather = getWeather.bind(this);\n    this.getForecast = getForecast.bind(this);\n    this.onChange = onChange.bind(this);\n    this.onSuggestionsFetchRequested = onSuggestionsFetchRequested.bind(this);\n    this.onSuggestionsClearRequested = onSuggestionsClearRequested.bind(this);\n\n  }\n  \n  //as soon as the component mounts on page load, we trigger the API calls\n  componentDidMount() {\n    this.getWeather()\n    //We also listen to see if the user can download shitstorm as a webapp\n    window.addEventListener('beforeinstallprompt', (e) => {\n        // Prevent Chrome 67 and earlier from automatically showing the prompt\n        e.preventDefault();\n        // Stash the event so it can be triggered later.\n        deferredPrompt = e;\n        // Update UI notify the user they can add to home screen\n        console.log('app download')\n        this.setState( {\n            appDownload: true\n        })\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\", //we display the city if geolocation found our user, if not we demand to know where they live\n      value,\n      onChange: this.onChange\n    };\n    return (\n      <div className={'weather'+ this.state.icon}>\n         <div className={this.state.appDownload ? 'downloadable wrapper' : 'wrapper'}>\n            <ShitTag />\n            <WTF />\n            <Autosuggest \n              multiSection={true}\n              suggestions={suggestions}\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n              getSuggestionValue={getSuggestionValue}\n              renderSuggestion={renderSuggestion}\n              renderSectionTitle={renderSectionTitle}\n              getSectionSuggestions={getSectionSuggestions}\n              inputProps={inputProps} \n            />\n            <Now \n              temperature={this.state.temperature} \n              description={this.state.description} \n              windDeg={this.state.windDeg}\n              windSpeed={this.state.windSpeed}\n              daylightLeft={this.state.daylightLeft}\n              sunrise={this.state.sunrise}\n              sunset={this.state.sunset}\n              message={this.state.message}\n              subMessage={this.state.subMessage}\n              icon={this.state.icon}\n            />\n            <WeatherRow currentForecast={this.state.currentForecast}/>\n            <Prompt />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}