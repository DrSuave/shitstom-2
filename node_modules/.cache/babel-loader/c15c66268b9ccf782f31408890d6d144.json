{"ast":null,"code":"import _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { cities } from './variables.js';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport ReactGA from 'react-ga';\nimport { onChange, isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport { onResponse, getWeather, getForecast } from './weatherFunc.js';\nexport var Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\nexport var location = ''; // ReactGA.initialize('UA-136012452-1');\n// ReactGA.pageview(window.location.pathname + window.location.search);\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      temperature: 'Loading',\n      //the temperature doubles as a loading notification if the connection is slow\n      city: 'London',\n      country: 'GB',\n      humidity: '',\n      description: '',\n      error: '',\n      value: '',\n      suggestions: [],\n      message: '',\n      subMessage: ''\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref) {\n      var value = _ref.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.onResponse = onResponse.bind(_assertThisInitialized(_this));\n    _this.getWeather = getWeather.bind(_assertThisInitialized(_this));\n    _this.getForecast = getForecast.bind(_assertThisInitialized(_this));\n    _this.onChange = onChange.bind(_assertThisInitialized(_this));\n    return _this;\n  } //as soon as the component mounts on page load, we trigger the API calls\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //initializeReactGA()\n      this.getWeather();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\",\n        //we display the city if geolocation found our user, if not we demand to know where they live\n        value: value,\n        onChange: this.onChange\n      };\n      return React.createElement(\"div\", {\n        className: 'weather' + this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(ShitTag, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(WTF, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(Autosuggest, {\n        multiSection: true,\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        renderSectionTitle: renderSectionTitle,\n        getSectionSuggestions: getSectionSuggestions,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(Now, {\n        temperature: this.state.temperature,\n        description: this.state.description,\n        windDeg: this.state.windDeg,\n        windSpeed: this.state.windSpeed,\n        daylightLeft: this.state.daylightLeft,\n        sunrise: this.state.sunrise,\n        sunset: this.state.sunset,\n        message: this.state.message,\n        subMessage: this.state.subMessage,\n        icon: this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(WeatherRow, {\n        currentForecast: this.state.currentForecast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js"],"names":["React","Component","Autosuggest","cities","Now","WeatherRow","ShitTag","WTF","ReactGA","onChange","isCity","getSuggestions","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","getCountry","onResponse","getWeather","getForecast","Api_Key","location","App","props","state","temperature","city","country","humidity","description","error","value","suggestions","message","subMessage","onSuggestionsFetchRequested","setState","onSuggestionsClearRequested","bind","inputProps","placeholder","icon","windDeg","windSpeed","daylightLeft","sunrise","sunset","currentForecast"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {cities} from './variables.js';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport ReactGA from 'react-ga';\nimport {onChange, isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport {onResponse, getWeather, getForecast} from './weatherFunc.js';\n\n\nexport const Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\nexport let location = '';\n\n// ReactGA.initialize('UA-136012452-1');\n// ReactGA.pageview(window.location.pathname + window.location.search);\n\nclass App extends React.Component {\n\n  state = {\n    temperature: 'Loading', //the temperature doubles as a loading notification if the connection is slow\n    city: 'London',\n    country: 'GB',\n    humidity: '',\n    description: '',\n    error: '',\n    value: '',\n    suggestions: [],\n    message: '',\n    subMessage: '',\n  }\n\n  constructor(props) {\n    super(props);\n    this.onResponse = onResponse.bind(this);\n    this.getWeather = getWeather.bind(this);\n    this.getForecast = getForecast.bind(this);\n    this.onChange = onChange.bind(this);\n\n\n\n  }\n  \n  \n\n  //as soon as the component mounts on page load, we trigger the API calls\n  componentDidMount() {\n    //initializeReactGA()\n    this.getWeather()\n  };\n\n  //onChange deals with users using the search bar\n  // onChange = (event, { newValue, method }) => {\n  //   this.setState({\n  //     value: newValue\n  //   });\n    \n  //   if (isCity(cities, 'name', newValue)) {\n  //     this.setState({\n  //       city: newValue,\n  //       country: getCountry(cities, 'name', newValue)\n  //     },\n  //     () => this.getWeather()\n  //     );\n  //   }\n\n  // };\n  \n  //autosuggest needs this\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\", //we display the city if geolocation found our user, if not we demand to know where they live\n      value,\n      onChange: this.onChange\n    };\n\n\n    return (\n      <div className={'weather'+this.state.icon}>\n         <div className=\"wrapper\">\n            <ShitTag />\n            <WTF />\n\n            <Autosuggest \n              multiSection={true}\n              suggestions={suggestions}\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n              getSuggestionValue={getSuggestionValue}\n              renderSuggestion={renderSuggestion}\n              renderSectionTitle={renderSectionTitle}\n              getSectionSuggestions={getSectionSuggestions}\n              inputProps={inputProps} \n            />\n            <Now \n              temperature={this.state.temperature} \n              description={this.state.description} \n              windDeg={this.state.windDeg}\n              windSpeed={this.state.windSpeed}\n              daylightLeft={this.state.daylightLeft}\n              sunrise={this.state.sunrise}\n              sunset={this.state.sunset}\n              message={this.state.message}\n              subMessage={this.state.subMessage}\n              icon={this.state.icon}\n            />\n            <WeatherRow \n              currentForecast={this.state.currentForecast}\n            />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}