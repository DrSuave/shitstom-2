{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { cities } from './variables.js';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport ReactGA from 'react-ga';\nimport { isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport { onResponse, getWeather, getForecast } from './weatherFunc.js';\nexport var Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\nexport var location = ''; // ReactGA.initialize('UA-136012452-1');\n// ReactGA.pageview(window.location.pathname + window.location.search);\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      temperature: 'Loading',\n      //the temperature doubles as a loading notification if the connection is slow\n      city: 'London',\n      country: 'GB',\n      humidity: '',\n      description: '',\n      error: '',\n      value: '',\n      suggestions: [],\n      message: '',\n      subMessage: ''\n    };\n\n    _this.getForecast =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var api_call, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"//api.openweathermap.org/data/2.5/forecast?q=\".concat(_this.state.city, \",\").concat(_this.state.country, \"&units=metric&appid=\").concat(Api_Key));\n\n              case 2:\n                api_call = _context.sent;\n                _context.next = 5;\n                return api_call.json();\n\n              case 5:\n                response = _context.sent;\n\n                //and we store the information\n                if (_this.state.city && _this.state.country) {\n                  _this.setState({\n                    currentForecast: response\n                  });\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onChange = function (event, _ref2) {\n      var newValue = _ref2.newValue,\n          method = _ref2.method;\n\n      _this.setState({\n        value: newValue\n      });\n\n      if (isCity(cities, 'name', newValue)) {\n        _this.setState({\n          city: newValue,\n          country: getCountry(cities, 'name', newValue)\n        }, function () {\n          return _this.getWeather();\n        });\n      }\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref3) {\n      var value = _ref3.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.onResponse = onResponse.bind(_assertThisInitialized(_this));\n    _this.getWeather = getWeather.bind(_assertThisInitialized(_this));\n    _this.getForecast = getForecast.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleRightClick\",\n    //handle left and right click take care of horizontal scrolling on the weather forecast section. The CSS 'scroll-behavior: smooth;' makes this nice and juicy\n    value: function handleRightClick() {\n      var scrollDistance = window.outerWidth / 2;\n      document.getElementById('weatherRow').scrollLeft += scrollDistance;\n    }\n  }, {\n    key: \"handleLeftClick\",\n    value: function handleLeftClick() {\n      var scrollDistance = window.outerWidth / 2;\n      document.getElementById('weatherRow').scrollLeft -= scrollDistance;\n    } //as soon as the component mounts on page load, we trigger the API calls\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //initializeReactGA()\n      this.getWeather();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\",\n        //we display the city if geolocation found our user, if not we demand to know where they live\n        value: value,\n        onChange: this.onChange\n      };\n      return React.createElement(\"div\", {\n        className: 'weather' + this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(ShitTag, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(WTF, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(Autosuggest, {\n        multiSection: true,\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        renderSectionTitle: renderSectionTitle,\n        getSectionSuggestions: getSectionSuggestions,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Now, {\n        temperature: this.state.temperature,\n        description: this.state.description,\n        windDeg: this.state.windDeg,\n        windSpeed: this.state.windSpeed,\n        daylightLeft: this.state.daylightLeft,\n        sunrise: this.state.sunrise,\n        sunset: this.state.sunset,\n        message: this.state.message,\n        subMessage: this.state.subMessage,\n        icon: this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(WeatherRow, {\n        handleLeftClick: this.handleLeftClick,\n        handleRightClick: this.handleRightClick,\n        currentForecast: this.state.currentForecast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js"],"names":["React","Component","Autosuggest","cities","Now","WeatherRow","ShitTag","WTF","ReactGA","isCity","getSuggestions","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","getCountry","onResponse","getWeather","getForecast","Api_Key","location","App","props","state","temperature","city","country","humidity","description","error","value","suggestions","message","subMessage","e","fetch","api_call","json","response","setState","currentForecast","onChange","event","newValue","method","onSuggestionsFetchRequested","onSuggestionsClearRequested","bind","scrollDistance","window","outerWidth","document","getElementById","scrollLeft","inputProps","placeholder","icon","windDeg","windSpeed","daylightLeft","sunrise","sunset","handleLeftClick","handleRightClick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {cities} from './variables.js';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport ReactGA from 'react-ga';\nimport {isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport {onResponse, getWeather, getForecast} from './weatherFunc.js';\n\n\nexport const Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\nexport let location = '';\n\n// ReactGA.initialize('UA-136012452-1');\n// ReactGA.pageview(window.location.pathname + window.location.search);\n\nclass App extends React.Component {\n\n  state = {\n    temperature: 'Loading', //the temperature doubles as a loading notification if the connection is slow\n    city: 'London',\n    country: 'GB',\n    humidity: '',\n    description: '',\n    error: '',\n    value: '',\n    suggestions: [],\n    message: '',\n    subMessage: '',\n  }\n\n  constructor(props) {\n    super(props);\n    this.onResponse = onResponse.bind(this);\n    this.getWeather = getWeather.bind(this);\n    this.getForecast = getForecast.bind(this);\n\n\n  }\n\n  getForecast = async (e) => {\n    //getForecast uses city and country rather than location\n    const api_call = await fetch(`//api.openweathermap.org/data/2.5/forecast?q=${this.state.city},${this.state.country}&units=metric&appid=${Api_Key}`); \n    let response = await api_call.json();\n    //and we store the information\n    if(this.state.city && this.state.country){\n      this.setState({\n        currentForecast: response\n      })\n    }\n  }\n  \n  //handle left and right click take care of horizontal scrolling on the weather forecast section. The CSS 'scroll-behavior: smooth;' makes this nice and juicy\n  handleRightClick() {\n    let scrollDistance = window.outerWidth/2;\n    document.getElementById('weatherRow').scrollLeft += scrollDistance;\n  }\n\n  handleLeftClick() {\n    let scrollDistance = window.outerWidth/2;\n    document.getElementById('weatherRow').scrollLeft -= scrollDistance;\n  }\n\n  //as soon as the component mounts on page load, we trigger the API calls\n  componentDidMount() {\n    //initializeReactGA()\n    this.getWeather()\n  };\n\n  //onChange deals with users using the search bar\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue\n    });\n    \n    if (isCity(cities, 'name', newValue)) {\n      this.setState({\n        city: newValue,\n        country: getCountry(cities, 'name', newValue)\n      },\n      () => this.getWeather()\n      );\n    }\n\n  };\n  \n  //autosuggest needs this\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\", //we display the city if geolocation found our user, if not we demand to know where they live\n      value,\n      onChange: this.onChange\n    };\n\n\n    return (\n      <div className={'weather'+this.state.icon}>\n         <div className=\"wrapper\">\n            <ShitTag />\n            <WTF />\n\n            <Autosuggest \n              multiSection={true}\n              suggestions={suggestions}\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n              getSuggestionValue={getSuggestionValue}\n              renderSuggestion={renderSuggestion}\n              renderSectionTitle={renderSectionTitle}\n              getSectionSuggestions={getSectionSuggestions}\n              inputProps={inputProps} \n            />\n            <Now \n              temperature={this.state.temperature} \n              description={this.state.description} \n              windDeg={this.state.windDeg}\n              windSpeed={this.state.windSpeed}\n              daylightLeft={this.state.daylightLeft}\n              sunrise={this.state.sunrise}\n              sunset={this.state.sunset}\n              message={this.state.message}\n              subMessage={this.state.subMessage}\n              icon={this.state.icon}\n            />\n            <WeatherRow \n              handleLeftClick={this.handleLeftClick}\n              handleRightClick={this.handleRightClick}\n              currentForecast={this.state.currentForecast}\n            />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}