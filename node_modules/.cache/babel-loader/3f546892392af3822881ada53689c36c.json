{"ast":null,"code":"import _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js\";\nimport React from 'react';\n\nvar Forecast =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Forecast, _React$Component);\n\n  function Forecast() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Forecast);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Forecast)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hour: 'waiting'\n    };\n\n    _this.humanReadable = function () {\n      var i = 0;\n\n      _this.props.currentForecast.list.map(function (item) {\n        //Human readable time\n        var secondsSinceEpoch = _this.props.currentForecast.list[i].dt;\n        var date = new Date(secondsSinceEpoch * 1000);\n        var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        var day = days[date.getUTCDay()];\n        var utcHour = date.getUTCHours();\n\n        if (utcHour > 12) {\n          var hour = utcHour - 12;\n          hour = hour + \"pm\";\n\n          _this.setState({\n            hour: hour\n          }, function () {\n            return _this.updateHour();\n          });\n        } else {\n          if (utcHour === 12) {\n            var _hour = utcHour + \"pm\";\n\n            _this.setState({\n              hour: _hour\n            }, function () {\n              return _this.updateHour();\n            });\n          } else {\n            if (utcHour === 0) {\n              utcHour = 12;\n            }\n\n            var _hour2 = utcHour + \"am\";\n\n            _this.setState({\n              hour: _hour2\n            }, function () {\n              return _this.updateHour();\n            });\n          }\n        } //let dateStr = [day, hour].join(\" \"); \n        //this.props.currentForecast.list[i].dt = dateStr;\n        //human readable temp\n\n\n        var humanTemp = Math.floor(item.main.temp);\n        humanTemp = humanTemp + 'Â°';\n        _this.props.currentForecast.list[i].main.temp = humanTemp; //meters per second to MPH\n\n        var imperialWind = Math.floor(_this.props.currentForecast.list[i].wind.speed * 2.237);\n        _this.props.currentForecast.list[i].wind.speed = imperialWind;\n        i++;\n\n        _this.forceUpdate();\n      });\n    };\n\n    _this.updateHour = function () {\n      _this.props.currentForecast.list[i].dt = day;\n      _this.props.currentForecast.list[i].sys.pod = _this.state.hour;\n    };\n\n    _this.State = {\n      0: 0\n    };\n    return _this;\n  }\n\n  _createClass(Forecast, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.currentForecast.list[0].dt !== prevProps.currentForecast.list[0].dt) {\n        this.humanReadable();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.humanReadable();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.currentForecast.list.map(function (item) {\n        return React.createElement(\"div\", {\n          className: \"weatherTile\",\n          key: item.dt_txt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"gravitas\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, item.dt), React.createElement(\"p\", {\n          className: \"gravitas\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, item.sys.pod), React.createElement(\"p\", {\n          className: \"thick judgement\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, item.weather[0].icon === '01d' ? \"Fuckin' Lush\" : item.weather[0].icon === '01n' ? 'STARFACE' : item.weather[0].icon === '02d' ? 'Decent' : item.weather[0].icon === '02n' ? 'Decent' : item.weather[0].icon === '03d' ? 'Could be shitter' : item.weather[0].icon === '03n' ? 'Could be shitter' : item.weather[0].icon === '04d' ? 'A bit bollocks' : item.weather[0].icon === '04n' ? 'normal' : item.weather[0].icon === '09d' ? 'shite' : item.weather[0].icon === '09n' ? 'shite' : item.weather[0].icon === '10d' ? 'crap' : item.weather[0].icon === '10n' ? 'crap' : item.weather[0].icon === '11d' ? 'Kapow!' : item.weather[0].icon === '11n' ? 'Kapow!' : item.weather[0].icon === '13d' ? 'FUCKING SNOW!' : item.weather[0].icon === '13n' ? 'FUCKING SNOW!' : 'FUCKING MIST'), React.createElement(\"img\", {\n          src: \"//openweathermap.org/img/w/\" + item.weather[0].icon + \".png\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"thick judgement\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, item.main.temp), React.createElement(\"p\", {\n          className: \"gravitas\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, item.weather[0].description), React.createElement(\"img\", {\n          className: \"windArrow\",\n          src: require('../img/arrow.svg'),\n          style: {\n            transform: \"rotate(\".concat(item.wind.deg, \"deg)\"),\n            width: \"20px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"gravitas\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, item.wind.speed, \"mph\"));\n      });\n    }\n  }]);\n\n  return Forecast;\n}(React.Component);\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js"],"names":["React","Forecast","state","hour","humanReadable","i","props","currentForecast","list","map","item","secondsSinceEpoch","dt","date","Date","days","day","getUTCDay","utcHour","getUTCHours","setState","updateHour","humanTemp","Math","floor","main","temp","imperialWind","wind","speed","forceUpdate","sys","pod","State","prevProps","dt_txt","weather","icon","description","require","transform","deg","width","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nclass Forecast extends React.Component {\n    state = {\n        hour: 'waiting'\n    }\n\n    humanReadable = () => {\n            var i = 0;\n            this.props.currentForecast.list.map(item => {\n                //Human readable time\n                let secondsSinceEpoch = this.props.currentForecast.list[i].dt;\n                let date = new Date(secondsSinceEpoch * 1000);\n                let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n                let day = days[date.getUTCDay()];\n                let utcHour = date.getUTCHours();\n                if (utcHour > 12) {\n                    let hour = utcHour - 12;\n                    hour = hour + \"pm\";\n                    this.setState({\n                        hour: hour\n                    },\n                    () => this.updateHour() \n                )\n                }\n                else {\n                    if (utcHour === 12)  {\n                        let hour = utcHour + \"pm\"\n                        this.setState({\n                            hour: hour\n                        },\n                        () => this.updateHour() \n                    )\n                    }\n                    else {\n                        if (utcHour === 0) {\n                            utcHour = 12;\n                        }\n                        let hour = utcHour + \"am\"\n                        this.setState({\n                            hour: hour\n                        },\n                        () => this.updateHour() \n                    )\n                    }\n                }\n                //let dateStr = [day, hour].join(\" \"); \n                //this.props.currentForecast.list[i].dt = dateStr;\n\n                //human readable temp\n                let humanTemp = Math.floor(item.main.temp);\n                humanTemp = humanTemp + 'Â°'\n                this.props.currentForecast.list[i].main.temp = humanTemp;\n                //meters per second to MPH\n                let imperialWind = Math.floor(this.props.currentForecast.list[i].wind.speed *  2.237);\n                this.props.currentForecast.list[i].wind.speed = imperialWind;\n\n                i++;\n                this.forceUpdate();\n            })\n    }\n\n    updateHour = () => {\n        this.props.currentForecast.list[i].dt = day;\n        this.props.currentForecast.list[i].sys.pod = this.state.hour;\n    }\n\n\n    componentDidUpdate(prevProps) {\n        if (this.props.currentForecast.list[0].dt !== prevProps.currentForecast.list[0].dt) {\n            this.humanReadable();\n        }\n    }\n    \n\n   State = {\n        0:0\n    }\n\n  \n\n    componentDidMount() {\n        this.humanReadable();\n    }\n\n    \n    render() {\n\n            return (\n\n                this.props.currentForecast.list.map(item => (\n                       \n                    <div className=\"weatherTile\" key={item.dt_txt} >\n                        <p className=\"gravitas\">{item.dt}</p>\n                        <p className=\"gravitas\">{item.sys.pod}</p>\n                        <p className=\"thick judgement\">{item.weather[0].icon === '01d' ? \"Fuckin' Lush\" : item.weather[0].icon === '01n' ? 'STARFACE' : item.weather[0].icon === '02d' ? 'Decent' : item.weather[0].icon === '02n' ? 'Decent' : item.weather[0].icon === '03d' ? 'Could be shitter' : item.weather[0].icon === '03n' ? 'Could be shitter' : item.weather[0].icon === '04d' ? 'A bit bollocks' : item.weather[0].icon === '04n' ? 'normal' : item.weather[0].icon === '09d' ? 'shite': item.weather[0].icon === '09n' ? 'shite' : item.weather[0].icon === '10d' ? 'crap': item.weather[0].icon === '10n' ? 'crap' : item.weather[0].icon === '11d' ? 'Kapow!': item.weather[0].icon === '11n' ? 'Kapow!' : item.weather[0].icon === '13d' ? 'FUCKING SNOW!': item.weather[0].icon === '13n' ? 'FUCKING SNOW!' : 'FUCKING MIST'}</p>\n                        <img src={\"//openweathermap.org/img/w/\" + item.weather[0].icon + \".png\"} />\n                        <p className=\"thick judgement\">{item.main.temp}</p>\n                        <p className=\"gravitas\">{item.weather[0].description}</p>\n                        <img \n                            className=\"windArrow\" \n                            src={require('../img/arrow.svg')} \n                            style={{transform: `rotate(${item.wind.deg}deg)`, \n                            width: `20px`}} \n                        />\n                        <p className=\"gravitas\">{item.wind.speed}mph</p>\n                    </div>\n                ))\n            )\n    }\n}\n\nexport default Forecast\n\n\n"]},"metadata":{},"sourceType":"module"}