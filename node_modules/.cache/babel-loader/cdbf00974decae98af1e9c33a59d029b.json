{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { cities } from './variables.js';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport ReactGA from 'react-ga';\nimport { isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport { onResponse } from './weatherFunc.js';\nexport var Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\nexport var location = ''; // ReactGA.initialize('UA-136012452-1');\n// ReactGA.pageview(window.location.pathname + window.location.search);\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      temperature: 'Loading',\n      //the temperature doubles as a loading notification if the connection is slow\n      city: 'London',\n      country: 'GB',\n      humidity: '',\n      description: '',\n      error: '',\n      value: '',\n      suggestions: [],\n      message: '',\n      subMessage: ''\n    };\n\n    _this.getWeather =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var api_call, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                ReactGA.event({\n                  category: 'User',\n                  action: 'Searched Weather'\n                }); //if we have the user's coordinates and they haven't attempted a search for somewhere else, we use their coordinates to search\n\n                if (_this.state.value.length < 1 && _this.props.latitude) {\n                  location = 'lat=' + _this.props.latitude + \"&lon=\" + _this.props.longitude;\n                } //if not, we use what they put in the search bar\n                else {\n                    location = 'q=' + _this.state.city + ',' + _this.state.country;\n                  }\n\n                console.log(location);\n                _context.next = 5;\n                return fetch(\"//api.openweathermap.org/data/2.5/weather?\".concat(location, \"&units=metric&appid=\").concat(Api_Key));\n\n              case 5:\n                api_call = _context.sent;\n                _context.next = 8;\n                return api_call.json();\n\n              case 8:\n                response = _context.sent;\n\n                //we then store the response in state\n                _this.setState({\n                  response: response\n                });\n\n                if (response.cod === \"404\") {\n                  //make sure the placename works\n                  alert(\"Oh shit! You've found a bug in the system. I'm making a proper error reporting feature for stuff like this - but in the meantime could you email wilf@wilfhorsfall.com to let me know which placename you searched for?\");\n                }\n\n                if (response.cod === \"429\") {\n                  //make sure the placename works\n                  alert(\"Do you think I'm fucking made of API keys? Unfortunately we've hit the limit of 60 calls to the weather API per minute - try again in 30-60 seconds.\");\n                } else {\n                  //then we fire the onResponse function\n                  _this.onResponse(); //we then fire getForecast, which predicts the future for us\n\n\n                  _this.getForecast();\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getForecast =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var api_call, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"//api.openweathermap.org/data/2.5/forecast?q=\".concat(_this.state.city, \",\").concat(_this.state.country, \"&units=metric&appid=\").concat(Api_Key));\n\n              case 2:\n                api_call = _context2.sent;\n                _context2.next = 5;\n                return api_call.json();\n\n              case 5:\n                response = _context2.sent;\n\n                //and we store the information\n                if (_this.state.city && _this.state.country) {\n                  _this.setState({\n                    currentForecast: response\n                  });\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onChange = function (event, _ref3) {\n      var newValue = _ref3.newValue,\n          method = _ref3.method;\n\n      _this.setState({\n        value: newValue\n      });\n\n      if (isCity(cities, 'name', newValue)) {\n        _this.setState({\n          city: newValue,\n          country: getCountry(cities, 'name', newValue)\n        }, function () {\n          return _this.getWeather();\n        });\n      }\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref4) {\n      var value = _ref4.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.onResponse = onResponse.bind(_assertThisInitialized(_this));\n    return _this;\n  } //this is the function that makes the API call and triggers onResponse()\n\n\n  _createClass(App, [{\n    key: \"handleRightClick\",\n    //handle left and right click take care of horizontal scrolling on the weather forecast section. The CSS 'scroll-behavior: smooth;' makes this nice and juicy\n    value: function handleRightClick() {\n      var scrollDistance = window.outerWidth / 2;\n      document.getElementById('weatherRow').scrollLeft += scrollDistance;\n    }\n  }, {\n    key: \"handleLeftClick\",\n    value: function handleLeftClick() {\n      var scrollDistance = window.outerWidth / 2;\n      document.getElementById('weatherRow').scrollLeft -= scrollDistance;\n    } //as soon as the component mounts on page load, we trigger the API calls\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //initializeReactGA()\n      this.getWeather();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\",\n        //we display the city if geolocation found our user, if not we demand to know where they live\n        value: value,\n        onChange: this.onChange\n      };\n      return React.createElement(\"div\", {\n        className: 'weather' + this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(ShitTag, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(WTF, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(Autosuggest, {\n        multiSection: true,\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        renderSectionTitle: renderSectionTitle,\n        getSectionSuggestions: getSectionSuggestions,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(Now, {\n        temperature: this.state.temperature,\n        description: this.state.description,\n        windDeg: this.state.windDeg,\n        windSpeed: this.state.windSpeed,\n        daylightLeft: this.state.daylightLeft,\n        sunrise: this.state.sunrise,\n        sunset: this.state.sunset,\n        message: this.state.message,\n        subMessage: this.state.subMessage,\n        icon: this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(WeatherRow, {\n        handleLeftClick: this.handleLeftClick,\n        handleRightClick: this.handleRightClick,\n        currentForecast: this.state.currentForecast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js"],"names":["React","Component","Autosuggest","cities","Now","WeatherRow","ShitTag","WTF","ReactGA","isCity","getSuggestions","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","getCountry","onResponse","Api_Key","location","App","props","state","temperature","city","country","humidity","description","error","value","suggestions","message","subMessage","getWeather","e","event","category","action","length","latitude","longitude","console","log","fetch","api_call","json","response","setState","cod","alert","getForecast","currentForecast","onChange","newValue","method","onSuggestionsFetchRequested","onSuggestionsClearRequested","bind","scrollDistance","window","outerWidth","document","getElementById","scrollLeft","inputProps","placeholder","icon","windDeg","windSpeed","daylightLeft","sunrise","sunset","handleLeftClick","handleRightClick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {cities} from './variables.js';\nimport Now from './Components/now';\nimport WeatherRow from './Components/weatherrow';\nimport ShitTag from './Components/shittag';\nimport WTF from './Components/wtf';\nimport ReactGA from 'react-ga';\nimport {isCity, getSuggestions, getSuggestionValue, renderSuggestion, renderSectionTitle, getSectionSuggestions, getCountry } from './searchFunc.js';\nimport {onResponse} from './weatherFunc.js';\n\n\nexport const Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\nexport let location = '';\n\n// ReactGA.initialize('UA-136012452-1');\n// ReactGA.pageview(window.location.pathname + window.location.search);\n\nclass App extends React.Component {\n\n  state = {\n    temperature: 'Loading', //the temperature doubles as a loading notification if the connection is slow\n    city: 'London',\n    country: 'GB',\n    humidity: '',\n    description: '',\n    error: '',\n    value: '',\n    suggestions: [],\n    message: '',\n    subMessage: '',\n  }\n\n  constructor(props) {\n    super(props);\n    this.onResponse = onResponse.bind(this);\n  }\n\n  //this is the function that makes the API call and triggers onResponse()\n  getWeather = async (e) => {\n    ReactGA.event({\n      category: 'User',\n      action: 'Searched Weather'\n    });\n    //if we have the user's coordinates and they haven't attempted a search for somewhere else, we use their coordinates to search\n    if (this.state.value.length < 1 && this.props.latitude) {\n      location = 'lat=' + this.props.latitude + \"&lon=\" + this.props.longitude;\n    }\n    //if not, we use what they put in the search bar\n    else {\n      location = 'q='+ this.state.city +','+ this.state.country;\n    }\n    console.log(location)\n    const api_call = await fetch(`//api.openweathermap.org/data/2.5/weather?${location}&units=metric&appid=${Api_Key}`);\n    const response = await api_call.json();\n    //we then store the response in state\n    this.setState({\n      response: response,\n    })\n    if (response.cod === \"404\") { //make sure the placename works\n      alert(\"Oh shit! You've found a bug in the system. I'm making a proper error reporting feature for stuff like this - but in the meantime could you email wilf@wilfhorsfall.com to let me know which placename you searched for?\")\n    }\n    if (response.cod === \"429\") { //make sure the placename works\n      alert(\"Do you think I'm fucking made of API keys? Unfortunately we've hit the limit of 60 calls to the weather API per minute - try again in 30-60 seconds.\")\n    }\n    else {\n      //then we fire the onResponse function\n      this.onResponse();\n      //we then fire getForecast, which predicts the future for us\n      this.getForecast();\n    }\n  }\n\n\n  getForecast = async (e) => {\n    //getForecast uses city and country rather than location\n    const api_call = await fetch(`//api.openweathermap.org/data/2.5/forecast?q=${this.state.city},${this.state.country}&units=metric&appid=${Api_Key}`); \n    let response = await api_call.json();\n    //and we store the information\n    if(this.state.city && this.state.country){\n      this.setState({\n        currentForecast: response\n      })\n    }\n  }\n  \n  //handle left and right click take care of horizontal scrolling on the weather forecast section. The CSS 'scroll-behavior: smooth;' makes this nice and juicy\n  handleRightClick() {\n    let scrollDistance = window.outerWidth/2;\n    document.getElementById('weatherRow').scrollLeft += scrollDistance;\n  }\n\n  handleLeftClick() {\n    let scrollDistance = window.outerWidth/2;\n    document.getElementById('weatherRow').scrollLeft -= scrollDistance;\n  }\n\n  //as soon as the component mounts on page load, we trigger the API calls\n  componentDidMount() {\n    //initializeReactGA()\n    this.getWeather()\n  };\n\n  //onChange deals with users using the search bar\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue\n    });\n    \n    if (isCity(cities, 'name', newValue)) {\n      this.setState({\n        city: newValue,\n        country: getCountry(cities, 'name', newValue)\n      },\n      () => this.getWeather()\n      );\n    }\n\n  };\n  \n  //autosuggest needs this\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: this.state.city ? this.state.city : \"Where the fuck do you live?\", //we display the city if geolocation found our user, if not we demand to know where they live\n      value,\n      onChange: this.onChange\n    };\n\n\n    return (\n      <div className={'weather'+this.state.icon}>\n         <div className=\"wrapper\">\n            <ShitTag />\n            <WTF />\n\n            <Autosuggest \n              multiSection={true}\n              suggestions={suggestions}\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n              getSuggestionValue={getSuggestionValue}\n              renderSuggestion={renderSuggestion}\n              renderSectionTitle={renderSectionTitle}\n              getSectionSuggestions={getSectionSuggestions}\n              inputProps={inputProps} \n            />\n            <Now \n              temperature={this.state.temperature} \n              description={this.state.description} \n              windDeg={this.state.windDeg}\n              windSpeed={this.state.windSpeed}\n              daylightLeft={this.state.daylightLeft}\n              sunrise={this.state.sunrise}\n              sunset={this.state.sunset}\n              message={this.state.message}\n              subMessage={this.state.subMessage}\n              icon={this.state.icon}\n            />\n            <WeatherRow \n              handleLeftClick={this.handleLeftClick}\n              handleRightClick={this.handleRightClick}\n              currentForecast={this.state.currentForecast}\n            />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}