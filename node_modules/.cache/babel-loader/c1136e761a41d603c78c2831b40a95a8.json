{"ast":null,"code":"var _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/searchFunc.js\",\n    _this2 = this;\n\nimport React, { Component } from 'react';\nimport { cities } from './variables.js'; //this is all stuff for Autosuggest\n\nexport function escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport function getSuggestions(value) {\n  var escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  var regex = new RegExp('^' + escapedValue, 'i'); //autosuggest checks our list of pre-approved cities that can trigger an API call\n\n  return cities.map(function (section) {\n    return {\n      title: section.title,\n      cities: section.cities.filter(function (language) {\n        return regex.test(language.name);\n      }) //we convert both the user-inputted search term and the cities themselves to lowercase so as to make searches case insensitive\n\n    };\n  }).filter(function (section) {\n    return section.cities.length > 0;\n  });\n}\nexport function getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\nexport function renderSuggestion(suggestion) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, suggestion.name);\n}\nexport function renderSectionTitle(section) {\n  return React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, section.title);\n}\nexport function getSectionSuggestions(section) {\n  return section.cities;\n} //here we check the country the city belongs to. Right now there is only one possible country, but in future more may be added\n\nexport function getCountry(cities, prop, value) {\n  var result = cities.find(function (language) {\n    return language.cities.some(function (item) {\n      return item[prop].toLowerCase() === value.toLowerCase();\n    });\n  });\n  return result ? result.title : null;\n} // this is to see if the search value matches an approved city\n\nexport function isCity(cities, prop, value) {\n  return cities.some(function (language) {\n    return language.cities.some(function (item) {\n      return item[prop].toLowerCase() === value.toLowerCase();\n    });\n  });\n} //onChange deals with users using the search bar\n\nexport function onChange(event, newValue, method) {\n  var _this = this;\n\n  this.setState({\n    value: newValue\n  });\n\n  if (isCity(cities, 'name', newValue)) {\n    this.setState({\n      city: newValue,\n      country: getCountry(cities, 'name', newValue)\n    }, function () {\n      return _this.getWeather();\n    });\n  }\n}\n; //autosuggest needs this\n\nonSuggestionsFetchRequested = function onSuggestionsFetchRequested(_ref) {\n  var value = _ref.value;\n\n  _this2.setState({\n    suggestions: getSuggestions(value)\n  });\n};\n\nonSuggestionsClearRequested = function onSuggestionsClearRequested() {\n  _this2.setState({\n    suggestions: []\n  });\n};","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/searchFunc.js"],"names":["React","Component","cities","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","map","section","title","filter","language","test","name","length","getSuggestionValue","suggestion","renderSuggestion","renderSectionTitle","getSectionSuggestions","getCountry","prop","result","find","some","item","toLowerCase","isCity","onChange","event","newValue","method","setState","city","country","getWeather","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {cities} from './variables.js';\n\n//this is all stuff for Autosuggest\n  export function escapeRegexCharacters(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n  \n  export function getSuggestions(value) {\n    const escapedValue = escapeRegexCharacters(value.trim());\n    \n    if (escapedValue === '') {\n      return [];\n    }\n  \n    const regex = new RegExp('^' + escapedValue, 'i');\n  \n    //autosuggest checks our list of pre-approved cities that can trigger an API call\n    return cities\n      .map(section => {\n        return {\n          title: section.title,\n          cities: section.cities.filter(language => regex.test(language.name)) //we convert both the user-inputted search term and the cities themselves to lowercase so as to make searches case insensitive\n        };\n      })\n      .filter(section => section.cities.length > 0);\n  }\n  \n  \n  export function getSuggestionValue(suggestion) {\n    return suggestion.name;\n  }\n  \n  export function renderSuggestion(suggestion) {\n    return (\n      <span>{suggestion.name}</span>\n    );\n  }\n  \n  export function renderSectionTitle(section) {\n    return (\n      <strong>{section.title}</strong>\n    );\n  }\n  \n  export function getSectionSuggestions(section) {\n    return section.cities;\n  }\n  \n  //here we check the country the city belongs to. Right now there is only one possible country, but in future more may be added\n  export function getCountry(cities, prop, value) {\n    var result = cities.find(function (language) {\n      return language.cities.some(function (item) {\n        return item[prop].toLowerCase() === value.toLowerCase()\n      })\n    })\n  \n    return result ? result.title : null\n  }\n\n  // this is to see if the search value matches an approved city\n  export function isCity(cities, prop, value) {\n    return cities.some(function (language) {\n      return language.cities.some(function (item) {\n        return item[prop].toLowerCase() === value.toLowerCase()\n      })\n    })\n  }\n\n  //onChange deals with users using the search bar\n  export function onChange(event, newValue, method){\n    this.setState({\n      value: newValue\n    });\n    \n    if (isCity(cities, 'name', newValue)) {\n      this.setState({\n        city: newValue,\n        country: getCountry(cities, 'name', newValue)\n      },\n      () => this.getWeather()\n      );\n    }\n\n  };\n  \n  //autosuggest needs this\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };"]},"metadata":{},"sourceType":"module"}